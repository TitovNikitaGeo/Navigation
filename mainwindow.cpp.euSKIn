#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    MyTimer = new QTimer(this);
    connect(MyTimer, &QTimer::timeout, this, &MainWindow::timeToCollectData);
    // MyTimer->start(1000);



    ///Just for init settings of widgets
    emit on_RBFixed_clicked();
    ///Just for init settings of widgets


    ///pointer to our list with item information
    tableWithItems = ui->ItemListTable;
    ///pointer to our list with item information


    ///Settings for MyGraphicView
    DrawingAreaTopView = new MyGraphicView(this);
    DrawingAreaSideView = new SideGraphicView(this);
    ui->verticalLayout->addWidget(DrawingAreaTopView);
    ui->verticalLayout->addWidget(DrawingAreaSideView);
    DrawingAreaSideView->hide();
    ///Settings for MyGraphicView



    ///Fabric initialization
    MyFabric = new Fabric();
    ///Fabric initialization

    ///Vault initialization
    Vault = new ItemsStorage();
    ///Vault initialization

    ///ObjectsListSetUp
    setUpObjectsTable();
    ///ObjectsListSetUp

    ///coordinator creation
    coordinator = new Coordinator();
    coordinator->Vault = this->Vault;
    ///coordinator creation

    ///p190Creator
    p190Creator = new P190_creator();
    p190Creator->setItemStoragePtr(Vault);
    p190Creator->setFileName(QString("test.p190"));
    ///p190Creator
}

void MainWindow::timeToCollectData()
{
    if (coordinator->calcCoors()) {
        coordinator->printCoors();
        p190Creator->createShotBlock();
    }
    qDebug()<<"__________________________ END TIC";

}

MainWindow::~MainWindow()
{
    delete MyFabric;
    delete DrawingAreaTopView;
    delete Vault;
    delete ui;
}


void MainWindow::on_DeleteItemPushButton_clicked()
{
    int row = tableWithItems->currentRow();
    if (tableWithItems->rowCount() == 0) {
        QMessageBox msgBox;
        msgBox.critical(this, "Error","Нечего удалять");
        return;
    }
    if (row == -1) row = tableWithItems->rowCount() - 1;
    QString deleteName = tableWithItems->item(row, 0)->text();
    if (row >= 0) {
        tableWithItems->removeRow(row);
        Vault->DeleteItem(deleteName);
    }
}


void MainWindow::on_AddItemtPushButton_clicked()
{
    ///Creating New Obj
    QString oldname = ui->ItemNameLineEdit->text();
    QString name = GetNewDeviceName(oldname);
    ui->ItemNameLineEdit->setText(name);
    ///Creating New Obj

    // FixedItem* newItem;

    if (ui->RBFixed->isChecked()) { ///getting params for fixed
        float x = ui->XLineEdit->text().toFloat();
        float y = ui->YLineEdit->text().toFloat();
        float z = ui->ZLineEdit->text().toFloat();
        FixedItemInfo FixedItemInfo(x,y,z,name);
        //newItem =
        createFixedItem(FixedItemInfo);
    }
    else if (ui->RBTowed->isChecked()) { ///getting params for towed

        if(ui->ComboBoxWiredWith->count() == 0) {
            QMessageBox msgBox;
            msgBox.critical(this, "Error","Нет точек крепления");
            return;
        }

        FixedItem* twiw = Vault->getItem(
            ui->ComboBoxWiredWith->currentText());//toWhoIsWired
        float wireLength = ui->WireLengthSpinBox->value();
        float angleToWired = 270; //change further if needed
        QString itemType = ui->ComboBoxItemType->currentText();
        TowedItemInfo TowedItemInfo(twiw, wireLength, angleToWired, name);

        if (itemType == "Streamer") {
            StreamerInfo StreamerItemInfo{TowedItemInfo, 0, {0}};
            // Streamer* newItem =
            createStreamerItem(StreamerItemInfo);
        } else if (itemType == "Buoy") {
            MyFabric->setMyVault(Vault);
            BuoyInfo BuoyItemInfo{TowedItemInfo, 0,0};
            createBuoyItem(BuoyItemInfo);
        } else if (itemType == "Towed") {
            //newItem =
            createTowedItem(TowedItemInfo);
        }
    }

}


void MainWindow::setUpObjectsTable() {
    tableWithItems->setColumnCount(4);

    tableWithItems->setHorizontalHeaderLabels({"Name", "X", "Y", "Z"});
    tableWithItems->horizontalHeader()->setSectionResizeMode(3, QHeaderView::Stretch);
    tableWithItems->horizontalHeader()->setSectionResizeMode(2, QHeaderView::Stretch);
    tableWithItems->horizontalHeader()->setSectionResizeMode(1, QHeaderView::Stretch);

    tableWithItems->setSelectionBehavior(QAbstractItemView::SelectRows);
    tableWithItems->setSelectionMode(QAbstractItemView::SingleSelection);

    tableWithItems->setEditTriggers(QTableWidget::NoEditTriggers);
}



void MainWindow::on_RBFixed_clicked()
{
    ui->ComboBoxItemType->setDisabled(true);
    ui->ComboBoxWiredWith->setDisabled(true);
    ui->WireLengthSpinBox->setDisabled(true);

    ui->XLineEdit->setDisabled(false);
    ui->YLineEdit->setDisabled(false);
    ui->ZLineEdit->setDisabled(false);
}


void MainWindow::on_RBTowed_clicked()
{
    ui->ComboBoxItemType->setDisabled(false);
    ui->ComboBoxWiredWith->setDisabled(false);
    ui->WireLengthSpinBox->setDisabled(false);

    ui->XLineEdit->setDisabled(true);
    ui->YLineEdit->setDisabled(true);
    ui->ZLineEdit->setDisabled(true);
}


FixedItem* MainWindow::createFixedItem(FixedItemInfo NewItemInfo) {
    bool needConnection = false;

    if (ui->NeedConnectionCB->isChecked()) {
        needConnection = true;
    }


    FixedItem* NewItem = MyFabric->CreateItem(NewItemInfo, needConnection);

    ///Saving New Item
    Vault->SaveItem(NewItem);
    ///Saving New Item

    ///adding obj to table
    addItemToObjectsList(NewItem);
    ///adding obj to table

    ///For now is only for fixed
    ui->ComboBoxWiredWith->addItem(NewItem->name);
    ///For now is only for fixed

    ///adding new object to our Drawing area
    DrawingAreaTopView->addPoint(NewItem->x,NewItem->y,NewItem->z,NewItem->name);
    DrawingAreaSideView->addPoint(NewItem->x,NewItem->y,NewItem->z,NewItem->name);
    ///adding new object to our Drawing area

    return NewItem;
}

FixedItem* MainWindow::createTowedItem(TowedItemInfo NewItemInfo) {
    bool needConnection = false;

    if (ui->NeedConnectionCB->isChecked()) {
        needConnection = true;
    }
    TowedItem* NewItem = MyFabric->CreateItem(NewItemInfo, needConnection);

    ///Saving New Item
    Vault->SaveItem(NewItem);
    ///Saving New Item


    ///adding obj to table
    addItemToObjectsList(NewItem);
    ///adding obj to table

    ///adding ability to wire any towed item with it
    ui->ComboBoxWiredWith->addItem(NewItem->name);

    ///adding new object to our Drawing area
    DrawingAreaTopView->addPoint(NewItem->x,NewItem->y,NewItem->z,NewItem->name);
    DrawingAreaSideView->addPoint(NewItem->x,NewItem->y,NewItem->z,NewItem->name);
    drawLineToTowed(NewItem);
    ///adding new object to our Drawing area


    return NewItem;
}

Streamer* MainWindow::createStreamerItem(StreamerInfo info)
{
    // QString name = info.towedInfo.name;
    // FixedItem* twiw = info.towedInfo.toWhoIsWired;

    // Streamer* NewItem = new Streamer();
    Streamer* NewItem = MyFabric->CreateItem(info);

    ///Saving New Item
    Vault->SaveItem(NewItem);
    ///Saving New Item

    ///adding obj to table
    addItemToObjectsList(NewItem);
    ///adding obj to table

    ///adding ability to wire any towed item with it
    ui->ComboBoxWiredWith->addItem(NewItem->name);

    ///Drawing
    drawLineToTowed(NewItem);
    DrawingAreaSideView->drawStreamer(NewItem->x, NewItem->y,
        NewItem->getChan(NewItem->getChanCount()-1)->x,
        NewItem->getChan(NewItem->getChanCount()-1)->y,
        NewItem->getChanCount());
    DrawingAreaSideView->drawStreamer(NewItem->x, NewItem->z,
        NewItem->getChan(NewItem->getChanCount()-1)->x,
        NewItem->getChan(NewItem->getChanCount()-1)->z,
        NewItem->getChanCount());


    return NewItem;


}

Buoy* MainWindow::createBuoyItem(BuoyInfo BuoyItemInfo)
{
    Buoy* NewItem = MyFabric->CreateBuoyItem(BuoyItemInfo);
    if (QString(BuoyItemInfo.towedInfo.toWhoIsWired->metaObject()->className()) == "Streamer") {
        dynamic_cast<Streamer*>(Vault->getItem(BuoyItemInfo.towedInfo.toWhoIsWired->name))->setEndBuoy(NewItem);
        NewItem->wireLength += dynamic_cast<Streamer*>(Vault->getItem(BuoyItemInfo.towedInfo.toWhoIsWired->name))->getTotalLength();
    }
    //тут мы проверяем, что если буй привязан к косе, то коса->концевой буй* = новый созданный объект
    //а потом увеличиваем дистанцию буксировки на длину косы


    ///Saving New Item
    Vault->SaveItem(NewItem);
    ///Saving New Item

    ///adding obj to table
    addItemToObjectsList(NewItem);
    ///adding obj to table

    ///adding ability to wire any towed item with it
    ui->ComboBoxWiredWith->addItem(NewItem->name);

    drawLineToTowed(NewItem);
    return NewItem;
}


void MainWindow::addItemToObjectsList(FixedItem* newItem) {

    QString name = newItem->name;
    // QString type = newItem->itemType;
    float x = newItem->x;
    float y = newItem->y;
    float z = newItem->z;
    tableWithItems->insertRow(NumberOfRowsInTable);
    tableWithItems->setItem(NumberOfRowsInTable, 0, new QTableWidgetItem(name));
    tableWithItems->setItem(NumberOfRowsInTable, 1, new QTableWidgetItem(QString::number(x,'g',10)));
    tableWithItems->setItem(NumberOfRowsInTable, 2, new QTableWidgetItem(QString::number(y,'g',10)));
    tableWithItems->setItem(NumberOfRowsInTable, 3, new QTableWidgetItem(QString::number(z,'g',10)));
    NumberOfRowsInTable++;
    // QString StringToPresentItem = name + QString::number(x) + QString::number(y);

}


QString MainWindow::GetNewDeviceName(QString name){
    //делает невозможным повторение имен
    //если имена повторяются, добавляет постфикс _1 _2 _3 и тд
    for (FixedItem* item: Vault->ItemsVault) {
        if (name == item->name) {
            if (name.at(name.length()-1).isDigit()){
                int curNumber = name.mid(1+name.lastIndexOf("_")).toInt();
                return name.left(name.lastIndexOf("_")) + "_" + QString::number(curNumber+1);
            } else {
                return name + "_1";
            }
        }
    }
    return name;
}

void MainWindow::drawLineToTowed(TowedItem* item) {
    //рисует линию от буксируемого устройства к точке крепления
    DrawingAreaTopView->drawLineToTowed(item->x, item->y,
            item->towingPoint->x, item->towingPoint->y);
    DrawingAreaSideView->drawLineToTowed(item->x, item->z,
            item->towingPoint->x, item->towingPoint->z);
}

void MainWindow::drawStreamer(Streamer *item)
{
    DrawingAreaTopView->drawStreamer(item->x, item->y,
        item->getChan(item->getChanCount())->x,
        item->getChan(item->getChanCount())->y, item->getChanCount());
    DrawingAreaSideView->drawStreamer(item->x, item->z,
        item->getChan(item->getChanCount())->x,
        item->getChan(item->getChanCount())->z,item->getChanCount());
}

void MainWindow::on_TopViewRB_clicked()
{
    DrawingAreaTopView->show();
    DrawingAreaSideView->hide();
}


void MainWindow::on_SideViewRB_clicked()
{
    DrawingAreaTopView->hide();
    DrawingAreaSideView->show();
}


void MainWindow::on_pushButton_clicked(bool checked)
{
    if (!checked) {
        coordinator->wireFixedItems();
        MyTimer->start(1000);
    } else {
        MyTimer->stop();
    }
}


void MainWindow::on_ComboBoxItemType_textActivated(const QString &arg1)
{
    if (arg1 == "Streamer"){
        ui->NeedConnectionCB->setChecked(false);
        ui->NeedConnectionCB->setEnabled(false);
    } else if(arg1 == "Buoy") {
        // ui->NeedConnectionCB->setChecked(true);
        // ui->NeedConnectionCB->setEnabled(false);
    } else {
        ui->NeedConnectionCB->setEnabled(true);
    }
}


void MainWindow::on_ComboBoxItemType_activated(int index)
{
    switch(index) {
    case 0:
        ui->ItemNameLineEdit->setText("");
        ui->NeedConnectionCB->setChecked(false);
        break;
    case 1:
        ui->ItemNameLineEdit->setText("");
        break;
    case 2:
        ui->ItemNameLineEdit->setText("Buoy");
        break;
    case 3:
        ui->ItemNameLineEdit->setText("Streamer");
        break;
    default:
        ui->ItemNameLineEdit->setText("");
        break;
    }
}


void MainWindow::on_doubleSpinBox_valueChanged(double arg1)
{

}

